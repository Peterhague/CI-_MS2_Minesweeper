let randomSquares = []; //creates the array to be populated by the randomise function
let grid = document.getElementById("grid");
let gridRow = ""; //these will be the rows (divs) to be appended to the minesweeper grid
let difficulty = document.getElementById("difficulty"); //targets the dropdown selector per the html file
let gridRowsList = document.getElementsByClassName("grid-rows"); // to create an array of the grid rows to iterate over
let scoreContainer = document.getElementById("score-container"); // gets the div to be populated by the remaining flags tally
let play = document.getElementById("play"); // gets the start game button from the html file
play.addEventListener("click", generatedGridRows); // generates the number of rows as per the difficulty selected
play.addEventListener("click", randomise);
play.addEventListener("click", newGame);
play.addEventListener("click", assignHTML);
play.addEventListener("click", flags);
function generatedGridRows() {
    let selectedDifficulty = difficulty.value; //being the selected difficulty option in the dropdown
    if (selectedDifficulty == "Easy") {
        for (i = 0; i < 9; i++) {
            gridRow = document.createElement("div");
            gridRow.classList.add("grid-rows", `grid-row-${i}`) // to be able to identify the row precisely if necessary
            grid.appendChild(gridRow);
        } // this loop creates 9 rows and adds them to the grid - EASY mode
    } else if (selectedDifficulty == "Medium") {
        for (i = 0; i < 15; i++) {
            gridRow = document.createElement("div");
            gridRow.classList.add("grid-rows", `grid-row-${i}`) // to be able to identify the row precisely if necessary
            grid.appendChild(gridRow);
        } // this loop creates 15 rows and adds them to the grid - MEDIUM mode
    } else if (selectedDifficulty == "Hard") {
        for (i = 0; i < 20; i++) {
            gridRow = document.createElement("div");
            gridRow.classList.add("grid-rows", `grid-row-${i}`) // to be able to identify the row precisely if necessary
            grid.appendChild(gridRow);
        } // this loop creates 20 rows and adds them to the grid - HARD mode
    }
}
function randomise() {
    /*Adds random numbers to the randomSquares variable (15 for easy, 40 for medium and 99 for hard). 
    Multiplies each random number by the number of squares on the grid, and pushes them to the array 
    IF the random number y does NOT appear in the list already, ie so that each number in the array
    is unique. This ensures that ultimately the grids will have the correct number of mines, and no
    squares with > 1 mine.*/
    let selectedDifficulty = difficulty.value;
    randomSquares = []; // to be populated by array of random numbers to be iterated to randomly place the "mines"
    if (selectedDifficulty == "Easy") {
        while (randomSquares.length < 15) {
            let y = Math.floor(Math.random()*81);
            if (randomSquares.includes(y) === false) {
                randomSquares.push(y);
            }  
        }
    } else if (selectedDifficulty == "Medium") {
        while (randomSquares.length < 40) {
            let y = Math.floor(Math.random()*225);
            if (randomSquares.includes(y) === false) {
                randomSquares.push(y);
            }  
        }
    } else if (selectedDifficulty == "Hard") {
        while (randomSquares.length < 99) {
            let y = Math.floor(Math.random()*400);
            if (randomSquares.includes(y) === false) {
                randomSquares.push(y);
            }  
        }
    }
}
function newGame() {
    let selectedDifficulty = difficulty.value;
    let existingRows = document.getElementsByClassName("grid-rows");
    for (rows of existingRows) {
        rows.innerHTML = "";
    } // nulls the rows code for each press of the play button, effectively a reset
    if (selectedDifficulty == "Easy") {
        for (x = 0; x < 9; x++) {
            for (y = 0; y < 9; y++) {
                /* the for x loop iterates through the rows of the grid and the nested y loop generates 9 squares for each row,
                to end up with a 9x9 grid of squares.*/ 
                let squares = document.createElement("button"); // these are the "square" button elements created x9 for each x loop
                squares.classList.add("squares");
                squares.classList.add("hovered-squares"); // this class adds the highlight on hover effect 
                let squaresNumber = (y*9)+x; 
                /* variable to be assigned to each square as a unique id, so they can be "searched"
                for the presence of "mines"*/
                if (randomSquares.includes(squaresNumber)) {
                    /* This code whether the list of random numbers generated by the randomise function includes the number assigned 
                    to the squaresNumber variable, and if so to assign the square the class of "bomb" and if not the class of 
                    "no-bomb". This effectively checks whether the square's id is included in the list of random numbers. */ 
                    squares.classList.add("bomb");
                } else {
                    squares.classList.add("no-bomb");
                } 
                squares.addEventListener("click", minesweep); // function to detect how many mines are in the squares surrounding the clicked square
                squares.addEventListener("click", counter); // function counts how many squares with no mines have been clicked to determine ultimate success
                squares.addEventListener("click", gameOverOne); // performs part of the game over "animation" sequence
                squares.addEventListener("click", gameOverTwo); // performs part of the game over "animation" sequence
                $(squares).mousedown(function(event) {
                    // code for placing and removing "flags" on squares as mine-markers, via a right-click (hence "case 3")
                    if (!this.classList.contains("selected")) {
                        // ie if the square hasn't already been left-clicked on to reveal no mine
                        switch (event.which) {
                        case 3:
                            if (this.classList.contains("even-squares")) {
                                $(this).removeClass("even-squares"); // removes the styling
                                $(this).removeClass("hovered-squares"); // removes hover pseudo class
                                $(this).addClass("evenReserved"); 
                                /* this purely nominal class reserves that the square DID have class of "even-squares"
                                within the element's attributes, so that fact can be accessed later on if the flag is removed*/
                                $(this).addClass("flagged");
                                $(this).addClass("text-white");
                                $(this).addClass("grey");
                                $(this).attr("data-id", this.innerHTML);
                                /* this custom attribute reserves the square's inner html (ie what number of mines surrounds it)
                                so that it can be accessed later on if the flag is removed (the inner html will change to the
                                flag icon)*/
                                $(this).html(`<i class="fas fa-flag"></i>`); // square displays the flag icon
                                scoreContainer.innerHTML = scoreContainer.innerHTML - 1; // reduces the display of number of flags in hand by 1
                            } else if (this.classList.contains("odd-squares")) {
                                // same process as above but for "odd-squares"
                                $(this).removeClass("odd-squares");
                                $(this).removeClass("hovered-squares");
                                $(this).addClass("oddReserved");
                                $(this).addClass("flagged");
                                $(this).addClass("text-white");
                                $(this).addClass("grey");
                                $(this).attr("data-id", this.innerHTML);
                                $(this).html(`<i class="fas fa-flag"></i>`);
                                scoreContainer.innerHTML = scoreContainer.innerHTML - 1;
                            } else if (this.classList.contains("flagged") && this.classList.contains("evenReserved")) {
                                // reverses the process when an even square already has a flag
                                $(this).removeClass("flagged");
                                $(this).removeClass("grey");
                                $(this).removeClass("text-white");
                                $(this).removeClass("evenReserved");
                                $(this).addClass("even-squares");
                                $(this).addClass("hovered-squares");
                                $(this).html($(this).attr("data-id"));
                                scoreContainer.innerHTML = parseInt(scoreContainer.innerHTML) + 1;
                            } else if (this.classList.contains("flagged") && this.classList.contains("oddReserved")) {
                                // reverses the process when an odd square already has a flag
                                $(this).removeClass("flagged");
                                $(this).removeClass("grey");
                                $(this).removeClass("text-white");
                                $(this).removeClass("oddReserved");
                                $(this).addClass("odd-squares");
                                $(this).addClass("hovered-squares");
                                $(this).html($(this).attr("data-id"));
                                scoreContainer.innerHTML = parseInt(scoreContainer.innerHTML) + 1;
                            }
                        }
                    }
                });
                squares.id = squaresNumber; // assigns each square a uniqe id based on its position in the grid
                gridRowsList[y].appendChild(squares); // adds each of the 9 squares created in each iteration of the outer loop
            }   
        }
    } else if (selectedDifficulty == "Medium") { // repeats the code above but for the Medium grid
        for (x = 0; x < 15; x++) {
            for (y = 0; y < 15; y++) {
                let squares = document.createElement("button");
                squares.innerHTML = "ok";
                squares.classList.add("squares");
                squares.classList.add("hovered-squares");
                let squaresNumber = (y*15)+x;
                if (randomSquares.includes(squaresNumber)) {
                    squares.classList.add("bomb");
                } else {
                    squares.classList.add("no-bomb");
                }
                squares.addEventListener("click", minesweep);
                squares.addEventListener("click", counter);
                squares.addEventListener("click", gameOverOne);
                squares.addEventListener("click", gameOverTwo);
                $(squares).mousedown(function(event) {
                    if (!this.classList.contains("selected")) {
                        switch (event.which) {
                        case 3:
                            if (this.classList.contains("even-squares")) {
                                $(this).removeClass("even-squares");
                                $(this).removeClass("hovered-squares");
                                $(this).addClass("evenReserved");
                                $(this).addClass("flagged");
                                $(this).addClass("text-white");
                                $(this).addClass("grey");
                                $(this).attr("data-id", this.innerHTML);
                                $(this).html(`<i class="fas fa-flag"></i>`);
                                scoreContainer.innerHTML = scoreContainer.innerHTML - 1;
                            } else if (this.classList.contains("odd-squares")) {
                                $(this).removeClass("odd-squares");
                                $(this).removeClass("hovered-squares");
                                $(this).addClass("oddReserved");
                                $(this).addClass("flagged");
                                $(this).addClass("text-white");
                                $(this).addClass("grey");
                                $(this).attr("data-id", this.innerHTML);
                                $(this).html(`<i class="fas fa-flag"></i>`);
                                scoreContainer.innerHTML = scoreContainer.innerHTML - 1;
                            } else if (this.classList.contains("flagged") && this.classList.contains("evenReserved")) {
                                $(this).removeClass("flagged");
                                $(this).removeClass("grey");
                                $(this).removeClass("text-white");
                                $(this).removeClass("evenReserved");
                                $(this).addClass("even-squares");
                                $(this).addClass("hovered-squares");
                                $(this).html($(this).attr("data-id"));
                                scoreContainer.innerHTML = parseInt(scoreContainer.innerHTML) + 1;
                            } else if (this.classList.contains("flagged") && this.classList.contains("oddReserved")) {
                                $(this).removeClass("flagged");
                                $(this).removeClass("grey");
                                $(this).removeClass("text-white");
                                $(this).removeClass("oddReserved");
                                $(this).addClass("odd-squares");
                                $(this).addClass("hovered-squares");
                                $(this).html($(this).attr("data-id"));
                                scoreContainer.innerHTML = parseInt(scoreContainer.innerHTML) + 1;
                            }
                        }
                    }
                });
                squares.id = squaresNumber;
                gridRowsList[y].appendChild(squares);
            }   
        }
    } else if (selectedDifficulty == "Hard") { // repeats the code above but for Hard grid
        for (x = 0; x < 20; x++) {
            for (y = 0; y < 20; y++) {
                let squares = document.createElement("button");
                squares.innerHTML = "ok";
                squares.classList.add("squares");
                squares.classList.add("hovered-squares");
                let squaresNumber = (y*20)+x;
                if (randomSquares.includes(squaresNumber)) {
                    squares.classList.add("bomb");
                } else {
                    squares.classList.add("no-bomb");
                }
                squares.addEventListener("click", minesweep);
                squares.addEventListener("click", counter);
                squares.addEventListener("click", gameOverOne);
                squares.addEventListener("click", gameOverTwo);
                $(squares).mousedown(function(event) {
                    if (!this.classList.contains("selected")) {
                        switch (event.which) {
                        case 3:
                            if (this.classList.contains("even-squares")) {
                                $(this).removeClass("even-squares");
                                $(this).removeClass("hovered-squares");
                                $(this).addClass("evenReserved");
                                $(this).addClass("flagged");
                                $(this).addClass("text-white");
                                $(this).addClass("grey");
                                $(this).attr("data-id", this.innerHTML);
                                $(this).html(`<i class="fas fa-flag"></i>`);
                                scoreContainer.innerHTML = scoreContainer.innerHTML - 1;
                            } else if (this.classList.contains("odd-squares")) {
                                $(this).removeClass("odd-squares");
                                $(this).removeClass("hovered-squares");
                                $(this).addClass("oddReserved");
                                $(this).addClass("flagged");
                                $(this).addClass("text-white");
                                $(this).addClass("grey");
                                $(this).attr("data-id", this.innerHTML);
                                $(this).html(`<i class="fas fa-flag"></i>`);
                                scoreContainer.innerHTML = scoreContainer.innerHTML - 1;
                            } else if (this.classList.contains("flagged") && this.classList.contains("evenReserved")) {
                                $(this).removeClass("flagged");
                                $(this).removeClass("grey");
                                $(this).removeClass("text-white");
                                $(this).removeClass("evenReserved");
                                $(this).addClass("even-squares");
                                $(this).addClass("hovered-squares");
                                $(this).html($(this).attr("data-id"));
                                scoreContainer.innerHTML = parseInt(scoreContainer.innerHTML) + 1;
                            } else if (this.classList.contains("flagged") && this.classList.contains("oddReserved")) {
                                $(this).removeClass("flagged");
                                $(this).removeClass("grey");
                                $(this).removeClass("text-white");
                                $(this).removeClass("oddReserved");
                                $(this).addClass("odd-squares");
                                $(this).addClass("hovered-squares");
                                $(this).html($(this).attr("data-id"));
                                scoreContainer.innerHTML = parseInt(scoreContainer.innerHTML) + 1;
                            }
                        }
                    }
                });
                squares.id = squaresNumber;
                gridRowsList[y].appendChild(squares);
            }   
        }
    }
    if (selectedDifficulty == "Easy") {
        /* the outer loop iterates over the rows of the grid and the nested loop iterates over the 
        squares (ie children of the row). The code says if the row's index is even then the first square
        of that row is given the class of "odd-squares", and every alternate square of that row is
        given the class of "even-squares", and then the reverse for rows with indices that are odd.
        This is purely for styling in the checkerboard pattern, and to distinguish the code applied to 
        every alternate row of the grid. If the same code was applied to every row the grid would have
        vertical stripes and not a chequered effect. */
        for (let i = 0; i < 9; i++) {
            for (let x = 0; x < 9; x++) {
                if (i % 2 === 0 && x % 2 === 0) {
                    gridRowsList[i].children[x].classList.add("odd-squares");
                }   else if (i % 2 === 0 && x % 2 > 0) {
                    gridRowsList[i].children[x].classList.add("even-squares");
                } 
            }
            for (let x = 0; x < 9; x++) {
                if (i % 2 > 0 && x % 2 > 0) {
                    gridRowsList[i].children[x].classList.add("odd-squares");
                } else if (i % 2 > 0 && x % 2 === 0) {
                    gridRowsList[i].children[x].classList.add("even-squares");
                }
            }
        } 
    } else if (selectedDifficulty == "Medium") {
        for (let i = 0; i < 15; i++) {
            for (let x = 0; x < 15; x++) {
                if (i % 2 === 0 && x % 2 === 0) {
                    gridRowsList[i].children[x].classList.add("odd-squares");
                }   else if (i % 2 === 0 && x % 2 > 0) {
                    gridRowsList[i].children[x].classList.add("even-squares");
                } 
            }
            for (let x = 0; x < 15; x++) {
                if (i % 2 > 0 && x % 2 > 0) {
                    gridRowsList[i].children[x].classList.add("odd-squares");
                } else if (i % 2 > 0 && x % 2 === 0) {
                    gridRowsList[i].children[x].classList.add("even-squares");
                } 
            }
        } 
    } else if (selectedDifficulty == "Hard") {
        for (let i = 0; i < 20; i++) {
            for (let x = 0; x < 20; x++) {
                if (i % 2 === 0 && x % 2 === 0) {
                    gridRowsList[i].children[x].classList.add("odd-squares");
                }   else if (i % 2 === 0 && x % 2 > 0) {
                    gridRowsList[i].children[x].classList.add("even-squares");
                } 
            }
            for (let x = 0; x < 20; x++) {
                if (i % 2 > 0 && x % 2 > 0) {
                    gridRowsList[i].children[x].classList.add("odd-squares");
                } else if (i % 2 > 0 && x % 2 === 0) {
                    gridRowsList[i].children[x].classList.add("even-squares");
                }
            }
        } 
    } 
}
function assignHTML() {
/* This function assigns the numbers to each square that represent how many of that square's surrounding squares
contain mines. It does so by getting each square's id and checking the "mine" content of squares with ids that 
define them as being in the checking square's radius/orbit etc. This can be achieved because each square has an id
that can identify its position in the grid, and therefore its position relative to every other square. In a 400 square
"Hard" grid, the top left square has an id of 0 and the bottom right has an id of 399, with the sequence running left
to right along each row in turn.

This is a complex function because the number and relative position of the squares to evaluate vary depending on
(a) the size of the grid and
(b) whether the square is in the middle of the grid, on the edge, or in a corner.

-- squareSentinel is the square checking its neighbours
-- squareTarget are the squares being checked

The value of the the total variable is increased by one for every "mine" found. This value at the end of the outer loop
is then assigned as the sentinelSquare's inner html. */
    let squares = document.getElementsByClassName("squares");
    let selectedDifficulty = difficulty.value;
    if (selectedDifficulty == "Easy") {
        for (squareSentinel of squares) {
            if (parseInt(squareSentinel.id) > 1 && (parseInt(squareSentinel.id) + 1) % 9 === 0) {
            /*for squares with ids longer than 1 and divisible by 9 after the addition of 1 to its total.
            This captures the squares at the right-hand edge of the grid*/
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 9) && squareTarget.classList.contains("bomb")) {// squareTarget is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 8) && squareTarget.classList.contains("bomb")) {// squareTarget is to bottom left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 1) && squareTarget.classList.contains("bomb")) {// squareTarget is to left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 9) && squareTarget.classList.contains("bomb")) {// squareTarget is above
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 10) && squareTarget.classList.contains("bomb")) {// squareTarfet is to top left
                        total += 1;      
                    } 
                }
                squareSentinel.innerHTML = total; 
            } else if (parseInt(squareSentinel.id) > 1 && parseInt(squareSentinel.id) % 9 === 0) {
            /*for squares with ids longer than 1, and divisible by 9. This captures the squares at the left-hand edge of the grid*/
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 9) && squareTarget.classList.contains("bomb")) {// squareTarget is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 10) && squareTarget.classList.contains("bomb")) {// squareTarget is to bottom right 
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 1) && squareTarget.classList.contains("bomb")) {// squareTarget is to right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 9) && squareTarget.classList.contains("bomb")) {// squareTarget is above
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 8) && squareTarget.classList.contains("bomb")) {// squareTarget is to top right
                        total += 1;
                    }
                } 
                squareSentinel.innerHTML = total;
            } else if (parseInt(squareSentinel.id) === 0) {
            //captures the top-left square only
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 1) && squareTarget.classList.contains("bomb")) {// squareTarget is to right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 9) && squareTarget.classList.contains("bomb")) {// squareTarget is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 10) && squareTarget.classList.contains("bomb")) {// squareTarget is to bottom right
                        total += 1;
                    } 
                } 
                squareSentinel.innerHTML = total; 
            } else {
            /*applies to all other squares in grid not picked out above*/
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 9) && squareTarget.classList.contains("bomb")) {// squareTarget is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 10) && squareTarget.classList.contains("bomb")) {//squareTarget is to bottom right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 8) && squareTarget.classList.contains("bomb")) {// squareTarget is to bottom left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 9) && squareTarget.classList.contains("bomb")) {// squareTarget is above
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 8) && squareTarget.classList.contains("bomb")) {// squareTarget is top right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 10) && squareTarget.classList.contains("bomb")) {// squareTarget is to top left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 1) && squareTarget.classList.contains("bomb")) {// squareTarget is to left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 1) && squareTarget.classList.contains("bomb")) {// squareTarget is to right
                        total += 1;
                    }
                }
                squareSentinel.innerHTML = total;
            }  
        }
    } else if (selectedDifficulty == "Medium") {
        for (squareSentinel of squares) {
            if (squareSentinel.id.length > 1 && (parseInt(squareSentinel.id) + 1) % 15 === 0) {
            /*for sqaures with ids longer than 1, and divisible by 15 after the addition of 1 to their total. This captures the squares at the right-hand edge of the grid*/
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 15) && squareTarget.classList.contains("bomb")) {// squareTarget is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 14) && squareTarget.classList.contains("bomb")) {//squareTarget is bottom left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 1) && squareTarget.classList.contains("bomb")) {//squareTarget is left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 15) && squareTarget.classList.contains("bomb")) {//squareTarget is above
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 16) && squareTarget.classList.contains("bomb")) {//squareTarget is top left
                        total += 1;      
                    } 
                }
                squareSentinel.innerHTML = total; 
            } else if (squareSentinel.id.length > 1 && parseInt(squareSentinel.id) % 15 === 0) {
            /*for sqaures with ids longer than 1, and divisible by 15. This captures the squares at the left-hand edge of the grid*/
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 15) && squareTarget.classList.contains("bomb")) {//squareTarget is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 16) && squareTarget.classList.contains("bomb")) {//squareTarget is bottom right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 1) && squareTarget.classList.contains("bomb")) {//squareTarget is right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 15) && squareTarget.classList.contains("bomb")) {//squareTarget is above
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 14) && squareTarget.classList.contains("bomb")) {//squareTarget is top right
                        total += 1;
                    }
                } 
                squareSentinel.innerHTML = total;
            } else if (parseInt(squareSentinel.id) === 0) {
            //captures the top-left square only
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 1) && squareTarget.classList.contains("bomb")) {//squareTarget is right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 15) && squareTarget.classList.contains("bomb")) {//squareTarget is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 16) && squareTarget.classList.contains("bomb")) {//squareTarget is bottom right
                        total += 1;
                    }
                } 
                squareSentinel.innerHTML = total; 
            } else {
            /*applies to all other squares in grid not picked out above*/
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 15) && squareTarget.classList.contains("bomb")) {//squareTarget is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 16) && squareTarget.classList.contains("bomb")) {//squareTarget is bottom right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 14) && squareTarget.classList.contains("bomb")) {//target is bottom left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 15) && squareTarget.classList.contains("bomb")) {//target is above
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 14) && squareTarget.classList.contains("bomb")) {//target is top right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 16) && squareTarget.classList.contains("bomb")) {//target is top left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 1) && squareTarget.classList.contains("bomb")) {//target is left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 1) && squareTarget.classList.contains("bomb")) {//target is right
                        total += 1;
                    }
                }
                squareSentinel.innerHTML = total;
            }  
        }
    } else if (selectedDifficulty == "Hard") {
        for (squareSentinel of squares) {
            if (squareSentinel.id.length > 1 && parseInt(squareSentinel.id[squareSentinel.id.length - 1]) === 9 && squareSentinel.id[squareSentinel.id.length - 2] % 2 > 0) {
            /*for sqaures with ids longer than 1, ending in 9, and with a penultimate digit that is odd, eg 19, 39, 59. 
            This captures the squares at the right-hand edge of the grid*/
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 20) && squareTarget.classList.contains("bomb")) {//squareTarget is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 19) && squareTarget.classList.contains("bomb")) {//target is bottom left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 1) && squareTarget.classList.contains("bomb")) {//target is left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 20) && squareTarget.classList.contains("bomb")) {//target is above
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 21) && squareTarget.classList.contains("bomb")) {//target is top left
                        total += 1;      
                    } 
                }
                squareSentinel.innerHTML = total; 
            } else if (squareSentinel.id.length > 1 && parseInt(squareSentinel.id[squareSentinel.id.length - 1]) === 0 && squareSentinel.id[squareSentinel.id.length - 2] % 2 === 0) {
            /*for sqaures with ids longer than 1, ending in 0, and with a penultimate digit that is even, eg 20, 40, 60.
            This captures the squares at the left-hand edge of the grid*/
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 20) && squareTarget.classList.contains("bomb")) {//squareTarget is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 21) && squareTarget.classList.contains("bomb")) {//target is bottom right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 1) && squareTarget.classList.contains("bomb")) {//target is right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 20) && squareTarget.classList.contains("bomb")) {//target is above
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 19) && squareTarget.classList.contains("bomb")) {//target is top right
                        total += 1;
                    }
                } 
                squareSentinel.innerHTML = total;
            } else if (parseInt(squareSentinel.id) === 0) {
            //captures the top-left square only
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 1) && squareTarget.classList.contains("bomb")) {//squareTarget is right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 20) && squareTarget.classList.contains("bomb")) {//target is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 21) && squareTarget.classList.contains("bomb")) {//target is bottom right
                        total += 1;
                    }
                } 
                squareSentinel.innerHTML = total; 
            } else {
            /*applies to all other squares in grid not picked out above*/
                let total = 0;
                for (squareTarget of squares) {
                    if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 20) && squareTarget.classList.contains("bomb")) {//squareTarget is below
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 21) && squareTarget.classList.contains("bomb")) {//target is bottom right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 19) && squareTarget.classList.contains("bomb")) {//target is bottom left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 20) && squareTarget.classList.contains("bomb")) {//target is above
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 19) && squareTarget.classList.contains("bomb")) {//target is top right
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 21) && squareTarget.classList.contains("bomb")) {//target is top left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) - 1) && squareTarget.classList.contains("bomb")) {//target is left
                        total += 1;
                    } else if (parseInt(squareTarget.id) === (parseInt(squareSentinel.id) + 1) && squareTarget.classList.contains("bomb")) {//target is right
                        total += 1;
                    }
                }
                 squareSentinel.innerHTML = total;
            }  
        }
    }
    for (square of squares) { // simple loop to assign squares with class of "bomb" the skull font awesome icon as innerHTML
        if (square.classList.contains("bomb")) {
            square.innerHTML = `<i class="fas fa-skull"></i>`;
        }
    }
}
function flags() {
    /* Assigns the starting value of the number flags in hand counter depending on the selected difficulty*/
    let selectedDifficulty = difficulty.value;
    if (selectedDifficulty == "Easy") {
        scoreContainer.innerHTML = "";
        scoreContainer.innerHTML = 15;
    } else if (selectedDifficulty == "Medium") {
        scoreContainer.innerHTML = "";
        scoreContainer.innerHTML = 40;
    } else if (selectedDifficulty == "Hard") {
        scoreContainer.innerHTML = "";
        scoreContainer.innerHTML = 99;
    }
}
function minesweep() {
/* This code runs when the player left clicks on any square in the grid.
Its main function is to check if any of the surrounding squares of the clicked
square have an innerHTML value of zero. If the value of the clicked square is zero,
this function will then automatically "click" on any of its surrounding squares that
ALSO have a value of zero. */
    let selectedDifficulty = difficulty.value;
    this.removeEventListener("click", minesweep);// so a square can only be clicked once
    this.classList.remove("hovered-squares");// removes the highlight effect from clicked squares
    this.classList.remove("even-squares", "odd-squares");
    this.classList.add("selected");// adds identifier to clicked squares
    if (parseInt(this.innerHTML) === 0) { // changes they styling of clicked squares
        this.classList.add("text-grey");
    } else {
        this.classList.add("text-white");
    }
    let squares = document.getElementsByClassName("squares");
    for (square of squares) {
        /* removes the class identifier from the squares selected by the below code as
        surrounding the clicked square. This prevents the automated clicking code from
        clicking on squares previously identified as surrounding OTHER squares but which weren't
        selected for automatic clicking because the initially clicked square didn't have a value
        of zero*/
        square.classList.remove("clicked-square-radius");
    }
    let thisID = this.id;
    if (selectedDifficulty == "Easy") {// defines the relevant radius based on position of square
        if (parseInt(thisID) > 8 && parseInt(thisID) < 80 && (parseInt(thisID) + 1) % 9 === 0) {
            squares[parseInt(thisID) + 9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 8].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 10].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
        } else if (thisID > 1 && parseInt(thisID) % 9 === 0 && thisID != 72) {
            squares[parseInt(thisID) - 9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 8].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 10].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 0) {
            squares[parseInt(thisID) + 10].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) > 0 && thisID < 8) {
            squares[parseInt(thisID) + 9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 8].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 10].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 8) {
            squares[parseInt(thisID) + 8].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) > 72 && thisID < 80) {
            squares[parseInt(thisID) - 9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 8].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 10].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 72) {
            squares[parseInt(thisID) -9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) -8].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 80) {
            squares[parseInt(thisID) -9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) -10].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
        } else {
            squares[parseInt(thisID) - 9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 8].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 10].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 9].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 8].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 10].classList.add("clicked-square-radius");
        }
    } else if (selectedDifficulty == "Medium") {// defines the relevant radius based on position of square
        if (thisID > 14 && (parseInt(thisID) +1) % 15 === 0 && thisID < 224) {
            squares[parseInt(thisID) + 15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 14].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 16].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
        } else if (thisID.length > 1 && parseInt(thisID) % 15 === 0 && thisID != 210) {
            squares[parseInt(thisID) - 15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 14].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 16].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 0) {
            squares[parseInt(thisID) + 16].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) > 0 && thisID < 14) {
            squares[parseInt(thisID) + 15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 14].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 16].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 14) {
            squares[parseInt(thisID) + 14].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) > 210 && thisID < 224) {
            squares[parseInt(thisID) - 15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 14].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 16].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 210) {
            squares[parseInt(thisID) -15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) -14].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 224) {
            squares[parseInt(thisID) -15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) -16].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
        } else {
            squares[parseInt(thisID) - 15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 14].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 16].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 15].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 14].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 16].classList.add("clicked-square-radius");
        } 
    } else if (selectedDifficulty == "Hard") {// defines the relevant radius based on position of square
        if (thisID.length > 1 && parseInt(thisID[thisID.length - 1]) === 9 && thisID[thisID.length - 2] % 2 > 0 && thisID > 19 && thisID < 399) {
            squares[parseInt(thisID) + 20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 19].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 21].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
        } else if (thisID.length > 1 && parseInt(thisID[thisID.length - 1]) === 0 && thisID[thisID.length - 2] % 2 === 0 && thisID != 380) {
            squares[parseInt(thisID) - 20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 19].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 21].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 0) {
            squares[parseInt(thisID) + 21].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) > 0 && thisID < 19) {
            squares[parseInt(thisID) + 20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 19].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 21].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 19) {
            squares[parseInt(thisID) + 19].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) > 380 && thisID < 399) {
            squares[parseInt(thisID) - 20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 19].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 21].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 380) {
            squares[parseInt(thisID) -20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) -19].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
        } else if (parseInt(thisID) === 399) {
            squares[parseInt(thisID) -20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) -21].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
        } else {
            squares[parseInt(thisID) - 20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 19].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 21].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 20].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) - 1].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 19].classList.add("clicked-square-radius");
            squares[parseInt(thisID) + 21].classList.add("clicked-square-radius");
        }
    }  
    let clickedSquareRadius = document.getElementsByClassName("clicked-square-radius");
    for (square of clickedSquareRadius) {
        square.classList.add(`csr-${thisID}`)
    }   
    let automatedClickers = document.getElementsByClassName(`csr-${thisID}`)     
    for (clicker of automatedClickers) {   
        if (parseInt(this.innerHTML) === 0) {
            clicker.click();
        }
    }
}
function counter() {
    let selectedDifficulty = difficulty.value;
    let randomSquaresAll = [];
    let squares = document.getElementsByClassName("squares");
    if (selectedDifficulty == "Easy") {
        if (this.classList.contains("no-bomb")) {
            let clearedSquares = document.getElementsByClassName("selected");
            if (clearedSquares.length > 65) {
                while (randomSquaresAll.length < 81) {// populate random numbers array until it's 81 numbers long
                    let x = Math.floor(Math.random()*81);
                    if (randomSquaresAll.includes(x) === false) {
                        randomSquaresAll.push(x);
                    }
                }
                for (let j = 0; j < 81; j++) {
                    task(j);
                }
                function task(j) {            
                    setTimeout(function() {
                        squares[j].innerHTML = `<i class="fas fa-laugh-squint"></i>`;
                        squares[randomSquaresAll[j]].classList.remove("selected", "hovered-squares", "even-squares", "odd-squares", "text-white");
                        if (j % 3 === 0) {
                            squares[randomSquaresAll[j]].classList.add("yellow-square");
                        } else if (j % 3 > 0 && j % 2 === 0) {
                            squares[randomSquaresAll[j]].classList.add("orange-square");
                        } else {
                            squares[randomSquaresAll[j]].classList.add("pink-square");
                        }
                        squares[j].removeEventListener("click", minesweep);                    
                    }, 7 * j);
                    setTimeout(function() {            
                        for (square of squares) {
                            square.style.backgroundColor = "white";
                            square.style.color = "rgb(17, 231, 238)";
                        };
                    }, 2000);
                }
            }
            console.log(clearedSquares.length);
        }
    } else if (selectedDifficulty == "Medium") {
        if (this.classList.contains("no-bomb")) {
            let clearedSquares = document.getElementsByClassName("selected");
            if (clearedSquares.length > 184) {
                while (randomSquaresAll.length < 225) {// populate random numbers array until it's 81 numbers long
                    let x = Math.floor(Math.random()*225);
                    if (randomSquaresAll.includes(x) === false) {
                        randomSquaresAll.push(x);
                    }
                }
                for (let j = 0; j < 225; j++) {
                    task(j);
                }
                function task(j) {            
                    setTimeout(function() {
                        squares[j].innerHTML = `<i class="fas fa-laugh-squint"></i>`;
                        squares[randomSquaresAll[j]].classList.remove("selected", "hovered-squares", "even-squares", "odd-squares", "text-white");
                        if (j % 3 === 0) {
                            squares[randomSquaresAll[j]].classList.add("yellow-square");
                        } else if (j % 3 > 0 && j % 2 === 0) {
                            squares[randomSquaresAll[j]].classList.add("orange-square");
                        } else {
                            squares[randomSquaresAll[j]].classList.add("pink-square");
                        }
                        squares[j].removeEventListener("click", minesweep);                    
                    }, 5 * j);
                    setTimeout(function() {            
                        for (square of squares) {
                            square.style.backgroundColor = "white";
                            square.style.color = "rgb(17, 231, 238)";
                        };
                    }, 2000);
                }
            }
        }
    } else if (selectedDifficulty == "Hard") {
        if (this.classList.contains("no-bomb")) {
            let clearedSquares = document.getElementsByClassName("selected");
            if (clearedSquares.length > 300) {
                while (randomSquaresAll.length < 400) {// populate random numbers array until it's 81 numbers long
                    let x = Math.floor(Math.random()*400);
                    if (randomSquaresAll.includes(x) === false) {
                        randomSquaresAll.push(x);
                    }
                }
                for (let j = 0; j < 400; j++) {
                    task(j);
                }
                function task(j) {            
                    setTimeout(function() {
                        squares[j].innerHTML = `<i class="fas fa-laugh-squint"></i>`;
                        squares[randomSquaresAll[j]].classList.remove("selected", "hovered-squares", "even-squares", "odd-squares", "text-white");
                        if (j % 3 === 0) {
                            squares[randomSquaresAll[j]].classList.add("yellow-square");
                        } else if (j % 3 > 0 && j % 2 === 0) {
                            squares[randomSquaresAll[j]].classList.add("orange-square");
                        } else {
                            squares[randomSquaresAll[j]].classList.add("pink-square");
                        }
                        squares[j].removeEventListener("click", minesweep);                    
                    }, 3 * j);
                    setTimeout(function() {            
                        for (square of squares) {
                            square.style.backgroundColor = "white";
                            square.style.color = "rgb(17, 231, 238)";
                        };
                    }, 2500);
                }
            }
            console.log(clearedSquares.length);
        }
    }
}
function gameOverOne() {
    let randomSquaresBombs = [];
    let selectedDifficulty = difficulty.value;
    let bombs = document.getElementsByClassName("bomb");
    if (this.classList.contains("bomb") && !this.classList.contains("flagged")) {
        for (bomb of bombs) {
            bomb.innerHTML = `<i class="fas fa-skull"></i>`
        }
        if (selectedDifficulty == "Easy") {
            while (randomSquaresBombs.length < 15) {
                let x = Math.floor(Math.random()*15);
                if (randomSquaresBombs.includes(x) === false) {
                    randomSquaresBombs.push(x);
                }
            }
            for (let j = 0; j < 15; j++) {
                task(j);
            }
            function task(j) {            
                setTimeout(function() {
                    bombs[randomSquaresBombs[j]].classList.add("text-red");
                    bombs[randomSquaresBombs[j]].classList.remove("invisible-text");
                 }, 10 * j);
            }
        } else if (selectedDifficulty == "Medium") {
            while (randomSquaresBombs.length < 40) {
                let x = Math.floor(Math.random()*40);
                if (randomSquaresBombs.includes(x) === false) {
                    randomSquaresBombs.push(x);
                }
            } 
            for (let j = 0; j < 40; j++) {
                task(j);
            }
            function task(j) {            
                setTimeout(function() {
                    bombs[randomSquaresBombs[j]].classList.add("text-red");
                    bombs[randomSquaresBombs[j]].classList.remove("invisible-text");
                }, 15 * j);
            }
        } else if (selectedDifficulty == "Hard") {
            while (randomSquaresBombs.length < 99) {
                let x = Math.floor(Math.random()*99);
                if (randomSquaresBombs.includes(x) === false) {
                    randomSquaresBombs.push(x);
                }
            }  
            for (let j = 0; j < 99; j++) {
                task(j);
            }
            function task(j) {            
                setTimeout(function() {
                    bombs[randomSquaresBombs[j]].classList.add("text-red");
                    bombs[randomSquaresBombs[j]].classList.remove("invisible-text");
                }, 10 * j);
            }
        }
    }   
}
function gameOverTwo() {
    let squares = document.getElementsByClassName("squares");// gets all the squares on the grid
    let flaggedSquares = document.getElementsByClassName("flagged");
    if (this.classList.contains("bomb") && !this.classList.contains("flagged")) {
        //ie player has clicked on a mine without a flag, and it's game over
        for (square of squares) {
            square.classList.add("invisible-text");
            square.classList.remove("selected");
        }
        for (flag of flaggedSquares) {
            /*if (flag.classList.contains("bomb")) {
                flag.innerHTML = `<i class="fas fa-skull"></i>`;
            }*/
            if (flag.classList.contains("no-bomb")) {
                flag.style.color = "rgba(0, 0, 0, 0.0)";
            }
        }
        let randomSquaresAll = [];
        let selectedDifficulty = difficulty.value;
        if (selectedDifficulty == "Easy") {
            while (randomSquaresAll.length < 81) {// populate random numbers array until it's 81 numbers long
                let x = Math.floor(Math.random()*81);
                if (randomSquaresAll.includes(x) === false) {
                    randomSquaresAll.push(x);
                }
            }
            console.log(randomSquaresAll);
            for (let j = 0; j < 81; j++) {
                task(j);
            }
            function task(j) {            
                setTimeout(function() {
                    squares[randomSquaresAll[j]].classList.remove("hovered-squares", "even-squares", "odd-squares", "text-white");
                    if (j % 3 === 0) {
                        squares[randomSquaresAll[j]].classList.add("black-square");
                    } else if (j % 3 > 0 && j % 2 === 0) {
                        squares[randomSquaresAll[j]].classList.add("grey-square");
                    } else {
                        squares[randomSquaresAll[j]].classList.add("white-square");
                    }
                    squares[j].removeEventListener("click", minesweep);                    
                }, 7 * j);
                setTimeout(function() {            
                    for (square of squares) {
                        square.style.backgroundColor = "black";
                        square.style.color = "red";
                        square.innerHTML = `<i class="fas fa-skull"></i>`;
                    };
                }, 2000);
            }
        } else if (selectedDifficulty == "Medium") {
            while (randomSquaresAll.length < 225) {
                let x = Math.floor(Math.random()*225);
                if (randomSquaresAll.includes(x) === false) {
                    randomSquaresAll.push(x);
                }
            }
            let squares = document.getElementsByClassName("squares");  
            for (let j = 0; j < 225; j++) {
                task(j);
            }
            function task(j) {            
                setTimeout(function() {
                    squares[randomSquaresAll[j]].classList.remove("hovered-squares", "even-squares", "odd-squares", "text-white");
                    if (j % 3 === 0) {
                        squares[randomSquaresAll[j]].classList.add("black-square");
                    } else if (j % 3 > 0 && j % 2 === 0) {
                        squares[randomSquaresAll[j]].classList.add("grey-square");
                    } else {
                        squares[randomSquaresAll[j]].classList.add("white-square");
                    }
                    squares[j].removeEventListener("click", minesweep);                    
                }, 5 * j);
                setTimeout(function() {            
                    for (square of squares) {
                        square.style.backgroundColor = "black";
                        square.style.color = "red";
                        square.innerHTML = `<i class="fas fa-skull"></i>`;
                    };
                }, 2000);
            }
        } else if (selectedDifficulty == "Hard") {
            while (randomSquaresAll.length < 400) {
                let x = Math.floor(Math.random()*400);
                if (randomSquaresAll.includes(x) === false) {
                    randomSquaresAll.push(x);
                }
            }
            let squares = document.getElementsByClassName("squares");  
            for (let j = 0; j < 400; j++) {
                task(j);
            }
            function task(j) {            
                setTimeout(function() {
                    squares[randomSquaresAll[j]].classList.remove("hovered-squares", "even-squares", "odd-squares", "text-white");
                    if (j % 3 === 0) {
                        squares[randomSquaresAll[j]].classList.add("black-square");
                    } else if (j % 3 > 0 && j % 2 === 0) {
                        squares[randomSquaresAll[j]].classList.add("grey-square");
                    } else {
                        squares[randomSquaresAll[j]].classList.add("white-square");
                    }
                    squares[j].removeEventListener("click", minesweep);                    
                }, 3 * j);
            }
            setTimeout(function() {            
                for (square of squares) {
                    square.style.backgroundColor = "black";
                    square.style.color = "red";
                    square.innerHTML = `<i class="fas fa-skull"></i>`;
                };
            }, 2500);
        }  
    }
}  
